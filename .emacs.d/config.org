#+title: Adams SkitEmacs
* Init
#+begin_src emacs-lisp
;; Start server unless already started
(unless (file-exists-p "/run/host/run/user/1000/emacs/server")
  (server-mode 1))

(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa"  . "https://elpa.gnu.org/packages/")
                         ("org"   . "https://orgmode.org/elpa/")))
  #+end_src
* General
#+begin_src emacs-lisp
;; Put auto-generated code in custom.el.
(if (string= system-type "gnu/linux")
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (setq custom-file (expand-file-name "wcustom.el" user-emacs-directory)))

(load custom-file)

;; Purge trailing whitespace before saving file.
;; (add-hook 'before-save-hook 'whitespace-cleanup)
;; (add-hook 'before-save-hook (lambda () (delete-trailing-whitespace)))
;; NOTE: Using ws-butler now

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold 300000000 ; 300mb
                  gc-cons-percentage 0.6)))

;; Store backup files in cache.
(setq my/backup-dir "~/.cache/emacs/")
(make-directory my/backup-dir t)
(setq backup-directory-alist         `((".*" . , my/backup-dir  )))
(setq auto-save-file-name-transforms `((".*"   , my/backup-dir t)))

;; Add prompt indicator to `completing-read-multiple'.
;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
(defun crm-indicator (args)
  (cons (format "[CRM%s] %s"
                (replace-regexp-in-string
                 "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                 crm-separator)
                (car args))
        (cdr args)))
(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

;; Do not allow the cursor in the minibuffer prompt
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

;; Enable recursive minibuffers
(setq enable-recursive-minibuffers t)
#+end_src
* Built-in modes
#+begin_src emacs-lisp
(column-number-mode 1)
(global-subword-mode 1)
(when window-system (fringe-mode 0))
(show-paren-mode 1)
(display-time-mode 0)
(delete-selection-mode 0)
(pending-delete-mode t)
(global-auto-revert-mode 1)
;; (global-hl-line-mode 1)
(save-place-mode 1)
(line-number-mode 1)
;; (winner-mode 1)
#+end_src
* UI
#+begin_src emacs-lisp
(use-package emacs

  :init
  (add-to-list 'default-frame-alist '(height . 42))
  (add-to-list 'default-frame-alist '(width . 92))

  ;; Disable unwanted UI.
  (if (fboundp 'menu-bar-mode  ) (menu-bar-mode   -1))
  (if (fboundp 'tool-bar-mode  ) (tool-bar-mode   -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  ;; Remove line wrap symbol
  (set-display-table-slot standard-display-table 'wrap ?\ ))
#+end_src
* Theming
#+begin_src emacs-lisp
(use-package modus-themes :ensure
  :if window-system
  :init

  ;; Activates dark theme.
  (defun my/dark  () (interactive) (load-theme 'modus-vivendi-tinted))
  ;; Activates light theme.
  (defun my/light () (interactive) (load-theme 'modus-operandi-tinted))

  ;; Activates appropriate dark or light theme depending on what state the
  ;; desktop is in on startup.
  (if (string-match-p
       "dark"
       (shell-command-to-string
        "gsettings get org.gnome.desktop.interface color-scheme"))
      (my/dark) (my/light))

  ;; Toggle light/dark theme.
  :bind ([f5] . modus-themes-toggle)

  :custom
  (modus-themes-common-palette-overrides
   '((border-mode-line-active unspecified)
     (border-mode-line-inactive unspecified)))
  (modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted)))
#+end_src
* Variables
#+begin_src emacs-lisp
(setq-default
 ;; Indentation
 tab-width 4
 indent-tabs-mode nil

 ;; Sets max column width to 80 when autofilling.
 fill-column 80

 ;; Increase line spacing a bit.
 line-spacing 0.18)

(setq
 ;; Move by logical lines
 line-move-visual nil

 ;; Show matching parantheses
 show-paren-mode t

 ;; Don't truncate.
 truncate-lines nil

 ;; Disable lock-files
 create-lockfiles nil

 ;; Pop confirm dialog when exiting Emacs
 confirm-kill-emacs 'y-or-n-p

 ;; Immediately commit bookmark changes
 bookmark-save-flag 1

 ;; Disables Emacs welcome screen
 inhibit-startup-message t

 ;; Disable bell sounds.
 ring-bell-function 'ignore

 ;; Scroll one line at a time.
 mouse-wheel-scroll-amount '(3 ((shift) . 3))

 ;; don't accelerate scrolling
 mouse-wheel-progressive-speed nil

 ;; Avoid garbage collection at startup.
 gc-cons-threshold most-positive-fixnum ; 2^61 bytes
 gc-cons-percentage 0.6

 ;; TAB cycle if there are only few candidates
 ;; completion-cycle-threshold 3

 ;; Enable indentation+completion using the TAB key.
 ;; `completion-at-point' is often bound to M-TAB.
 tab-always-indent 'complete

 ;; ispell
 ispell-dictionary "en_US"
 ispell-program-name "hunspell"

 proced-enable-color-flag t ;; Use colors in proced
 proced-tree-flag t

 load-prefer-newer t

 org-agenda-overriding-header ""
 )

;; Replaces yes-or-no prompts with y-or-n prompts
(fset 'yes-or-no-p 'y-or-n-p)

(setenv "GPG_AGENT_INFO" nil)
(setenv "LANG" "en_US.UTF-8")
#+end_src
* Functions
#+begin_src emacs-lisp
;; Reverse characters in region.
(defun my/reverse-region (beg end)
  "Reverse characters between BEG and END."
  (interactive "r")
  (let ((region (buffer-substring beg end)))
    (delete-region beg end)
    (insert (nreverse region))))
#+end_src
* Key bindings
#+begin_src emacs-lisp
(use-package emacs
  :bind
  ("C-z" . nil) ;; Unset freeze-key

  ("M-i" . imenu)

  ("C-รฅ" . comment-line)
  ("C-รถ" . undo)
  ("C-<odiaeresis>" . undo)
  ("C-;" . undo)

  ("s-f" . windmove-right)
  ("s-b" . windmove-left)
  ("s-p" . windmove-up)
  ("s-n" . windmove-down)

  ;; Remap case functions to dwim since they can do both upcase word and region
  ([remap upcase-word] . upcase-dwim)
  ([remap downcase-word] . downcase-dwim)
  ("C-x C-u" . nil) ;; Unset upcase region
  ("C-x C-l" . nil) ;; Unset downcase region
  )
#+end_src
* Org Mode
#+begin_src emacs-lisp
(use-package org-mode
  :hook
  (org-mode . auto-fill-mode)
  (org-agenda-mode . toggle-truncate-lines)
  ;; (org-mode . (lambda() (org-cycle-hide-drawers 'all)))

  :bind (("C-c a" . org-agenda)
         ;; ("C-z" . 'helm-select-action)
         (:map org-mode-map
               ("C-," . nil)
               ("C-c c" . my/org-table-recalc)
               ("M-n" . org-metadown)
               ("M-p" . org-metaup)))

  :custom
  ;, (org-display-inline-images t)
  ;, (org-redisplay-inline-images t)
  ;, (org-startup-with-inline-images "inlineimages")
  (org-hide-emphasis-markers t)
  (org-image-actual-width 256)

  ;; Agenda
  (org-agenda-loop-over-headlines-in-active-region nil)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-timestamp-if-done t)
  (org-agenda-span 'week)
  (org-agenda-sticky nil)
  (org-agenda-show-all-dates t)
  (org-agenda-window-setup 'current-window)

  (org-confirm-elisp-link-function nil)
  (org-directory (getenv "ORG_DIR"))

  ;; Export
  (org-export-with-author nil)
  (org-export-with-date nil)
  (org-export-with-toc nil)
  (org-html-head-include-default-style nil)
  (org-html-head-include-scripts nil)
  (org-html-validation-link nil)

  (org-link-frame-setup '((file . find-file)))
  (org-list-allow-alphabetical t)
  (org-log-done 'time)
  (org-log-into-drawer t)
  (org-log-refile 'time)

  (org-pretty-entities nil)
  (org-src-fontify-natively t)
  (org-src-preserve-indentation t)
  (org-src-tab-acts-natively t)
  (org-startup-folded t)

  (org-agenda-files (mapcar (lambda (f) (concat org-directory "/" f))
                            '("agenda.org" "skola.org")))
  (org-deadline-warning-days 0)
  (org-agenda-custom-commands
   '(("d" "daily"
      tags-todo "DEADLINE>=\"<today>\"&DEADLINE<=\"<+7d>\""
      ((org-agenda-sorting-strategy '(todo-state-down))))))
  ;; (org-startup-indented t)

  :init
  (defun my/org-table-recalc () (interactive)
         (org-table-recalculate-buffer-tables)
         (org-table-recalculate 'iterate)
         (org-table-recalculate-buffer-tables)
         (org-table-recalculate-buffer-tables))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t) (julia . t))))

(use-package org-superstar :ensure
  :hook ((org-mode . org-superstar-mode)))

(use-package org-super-agenda :ensure
  :init (org-super-agenda-mode 1)

  :custom
  (org-super-agenda-header-separator "")
  (org-super-agenda-groups
   '((:name ""
            :and (:date today :priority> "B")
            :face (:foreground "#FF0000" :weight bold)
            :order 0)
     (:name "" :face (:priority> "B" :order 1))
     (:name "" :date today :order 10)
     (:name "" :and (:tag "lumen")
            :time-grid t
            :order 20)
     (:name "" :anything t :order 100))))
#+end_src
** Org Roam
#+begin_src emacs-lisp
(use-package org-roam :ensure
  :hook
  (after-init . org-roam-db-autosync-mode)
  ;; :init
  ;; (org-roam-db-autosync-mode t)
  :bind
  ("C-c r f" . org-roam-node-find)
  ("C-c r i" . org-roam-node-insert)
  ("C-c r c" . org-roam-capture)
  ("C-c r r" . org-roam-refile)
  ("C-c r d c" . org-roam-dailies-capture-today)
  ("C-c r d g" . org-roam-dailies-goto-today)
  ("C-c r d t" . org-roam-dailies-goto-tomorrow)
  ("C-c r d y" . org-roam-dailies-goto-yesterday)
  ("C-c r d p" . org-roam-dailies-goto-previous-note)
  ("C-c r d n" . org-roam-dailies-goto-next-note)

  :custom
  (org-roam-directory (file-truename org-directory))
  (org-roam-completion-everywhere nil)
  ;; (org-roam-completion-system 'default)
  (org-roam-dailies-directory "journal/")
  (org-roam-file-exclude-regexp "data/")
  (org-roam-verbose nil)

  (org-roam-capture-templates
   '(("d" "default" plain "%?" :target
      (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
      :unnarrowed t)))

  (org-roam-dailies-capture-templates
   '(("d" "default" entry
      "* %?"
      :target (file+head "%<%Y-%m-%d>.org"
                         "#+title: %<%Y-%m-%d>\n"))))

  (org-roam-node-display-template
   (concat "${title:*} "
           (propertize "${tags:10}" 'face 'org-tag))))
#+end_src
** COMMENT Org Alert
#+begin_src emacs-lisp
(use-package org-alert :ensure
  :config
  (org-alert-enable)
  :custom
  (org-alert-interval 300)
  (org-alert-notify-cutoff 300)
  ;; (org-alert-notify-after-event-cutoff 300)
  (alert-default-style 'libnotify)
  (org-alert-match-string "SCHEDULED>=\"<today>\"+SCHEDULED<\"<tomorrow>\"|DEADLINE>=\"<today>\"+DEADLINE<\"<tomorrow>\""))
#+end_src
** COMMENT Org Pomodoro
#+begin_src emacs-lisp
(use-package org-pomodoro :ensure
  :init
  (add-hook 'org-pomodoro-finished-hook
            '(lambda () (notifications-notify
                         :title "๐ต" :body "Ta en paus."
                         :sound-name "service-logout")))
  (add-hook 'org-pomodoro-break-finished-hook
            '(lambda () (notifications-notify
                         :title "๐ค" :body "Bรถrja arbeta ditt krรคk!"
                         :sound-name "service-login")))
  (add-hook 'org-pomodoro-started-hook
            '(lambda () (notifications-notify
                         :title "๐ค" :body "Pass pรฅbรถrjat.")))

  :custom
  (org-pomodoro-finished-sound-p nil)
  (org-pomodoro-long-break-sound-p nil)
  (org-pomodoro-overtime-sound-p nil)
  (org-pomodoro-short-break-sound-p nil)

  :bind
  ("C-c p s" . org-pomodoro)
  ("C-c p e" . org-pomodoro-extend-last-clock))
#+end_src
** COMMENT Hide drawers
#+begin_src emacs-lisp
(defun org-cycle-hide-drawers (state)
  "Re-hide all drawers after a visibility state change."
  (when (and (derived-mode-p 'org-mode)
             (not (memq state '(overview folded contents))))
    (save-excursion
      (let* ((globalp (memq state '(contents all)))
             (beg (if globalp
                      (point-min)
                    (point)))
             (end (if globalp
                      (point-max)
                    (if (eq state 'children)
                        (save-excursion
                          (outline-next-heading)
                          (point))
                      (org-end-of-subtree t)))))
        (goto-char beg)
        (while (re-search-forward org-drawer-regexp end t)
          (save-excursion
            (beginning-of-line 1)
            (when (looking-at org-drawer-regexp)
              (let* ((start (1- (match-beginning 0)))
                     (limit
                      (save-excursion
                        (outline-next-heading)
                        (point)))
                     (msg (format
                           (concat
                            "org-cycle-hide-drawers:  "
                            "`:END:`"
                            " line missing at position %s")
                           (1+ start))))
                (if (re-search-forward "^[ \t]*:END:" limit t)
                    (outline-flag-region start (point-at-eol) t)
                  (user-error msg))))))))))
#+end_src
* Tree sitter
#+begin_src emacs-lisp
(use-package treesit
  :custom (treesit-font-lock-level 3))

(use-package treesit-auto :ensure
  :custom
  (treesit-auto-install t)
  ;; (treesit-auto-langs '(c c++ julia bash json))

  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src

* Git
#+begin_src emacs-lisp
(use-package magit :ensure :defer t
  :bind ("C-x g" . magit-status))

(use-package blamer :ensure :defer t
  :bind (("C-c i" . blamer-show-commit-info))
  :custom
  (blamer-idle-time 0.0)
  (blamer-min-offset 0)
  (blamer-max-commit-message-length 64)
  (blamer-show-avatar-p nil))

;; (use-package git-gutter
;;   :ensure t)
#+end_src
* Nerd Icons
#+begin_src emacs-lisp
(use-package nerd-icons :ensure)

(use-package nerd-icons-completion :ensure
  :after (marginalia nerd-icons)
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src
* Corfu
#+begin_src emacs-lisp
(use-package corfu :ensure
  ;; Optional customizations
  :custom
  (corfu-cycle t) ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t) ;; Enable auto completion
  (corfu-auto-delay 0) ;; No delay when searching for candidates
  (corfu-auto-prefix 2) ;; Two characters before searching candidates
  (corfu-quit-no-match t) ;; or t

  ;; (corfu-separator ?\s)         ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)  ;; Never quit at completion boundary
  ;; (corfu-preview-current t)     ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)     ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)    ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)       ;; Use scroll margin

  :init
  (global-corfu-mode)

  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                  corfu-popupinfo-delay nil)
      (corfu-mode 1)))

  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)

  :bind (:map corfu-map
              ("RET" . nil)
              ("SPC" . corfu-insert-separator)))

(use-package nerd-icons-corfu :ensure
  :init
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src
** Kind Icon
#+begin_src emacs-lisp
(use-package kind-icon
  :ensure t
  :after corfu
  :config (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
* Vertico
:LOGBOOK:
- Refiled on [2023-09-16 lรถr 14:40]
- Refiled on [2023-09-12 tis 19:31]
- Refiled on [2023-09-12 tis 19:27]
:END:
#+begin_src emacs-lisp
(use-package vertico :ensure
  :init (vertico-mode)
  :bind (:map vertico-map
              ("C-l" . vertico-directory-up)
              ("C-j" . vertico-directory-enter)))

(use-package savehist :init (savehist-mode))
#+end_src
* Marginalia
#+begin_src emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia :ensure
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src
* All-the-icons
#+begin_src emacs-lisp
(use-package all-the-icons :ensure
  :if (display-graphic-p))

;; (use-package all-the-icons-completion :ensure
  ;; :after (marginalia all-the-icons)
  ;; :hook  (marginalia-mode . all-the-icons-completion-marginalia-setup)
  ;; :init  (all-the-icons-completion-mode))
#+end_src
* Orderless
#+begin_src emacs-lisp
(use-package orderless :ensure
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src
* No Littering
#+begin_src emacs-lisp
(use-package no-littering :ensure)
#+end_src
* ws-butler
#+begin_src emacs-lisp
(use-package ws-butler :ensure :init (ws-butler-global-mode))
#+end_src
* Eglot
#+begin_src emacs-lisp
(use-package eglot
  :if (not (getenv "TERMUX_VERSION"))

  :hook
  ((c-mode
    c++-mode
    c-ts-mode
    c++-ts-mode
    python-mode
    python-ts-mode
    java-ts-mode) . eglot-ensure)

  :ensure-system-package
  ((clangd . "fish -c 'i -y clang-tools-extra'"))

  :custom
  (eldoc-echo-area-use-multiline-p 1)
  (eldoc-idle-delay 0.05)
  (eglot-ignored-server-capabilities '(:inlayHintProvider))

  :bind (:map eglot-mode-map
              ("C-c v" . eglot-rename)
              ("C-c d" . eglot-find-declaration)))

(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               '(c-mode . ("clangd" "-header-insertion=never"))
               '(c-ts-mode . ("clangd" "-header-insertion=never"))))

;; Help clangd to find stuff
(setenv "CPATH" "/usr/include")
#+end_src
* Mode line
#+begin_src emacs-lisp
(use-package doom-modeline :ensure
  :if (not (getenv "TERMUX_VERSION"))

  :init
  (use-package all-the-icons :ensure)
  (doom-modeline-mode 1)

  :custom
  (doom-modeline-hud nil)
  (doom-modeline-height 38)
  (doom-modeline-project-detection 'auto)
  (doom-modeline-position-column-line-format '("%l:%c"))
  (doom-modeline-minor-modes nil)
  (doom-modeline-enable-word-count nil)
  (doom-modeline-total-line-number nil)
  (doom-modeline-time nil)
  (doom-modeline-buffer-encoding nil))

(use-package hide-mode-line
  :ensure t
  :defer t
  :hook ((eshell-mode . hide-mode-line-mode)
         (vterm-mode . hide-mode-line-mode)
         (occur-mode . hide-mode-line-mode)))
#+end_src
* Try
#+begin_src emacs-lisp
(use-package try :ensure :commands (try try-and-refresh))
#+end_src
* Which Key
#+begin_src emacs-lisp
(use-package which-key :ensure
  :init (which-key-mode))
#+end_src
* YASnippet
#+begin_src emacs-lisp
(use-package yasnippet :ensure
  :init
  (let ((yas-dir (concat (getenv "HEM") "/.emacs.d/snippets")))
    (add-to-list 'yas-snippet-dirs yas-dir))
  (yas-global-mode 1))
#+end_src
* VTerm
#+begin_src emacs-lisp
(use-package vterm :ensure
  :if (and (not (getenv "TERMUX_VERSION")) (executable-find "cmake"))

  :bind
  ("C-z b" . (lambda () (interactive) (my/vterm-box "box")))
  ("C-z d" . (lambda () (interactive) (my/vterm-box "debian")))

  :ensure-system-package
  ((cmake . "fish -c 'i -y cmake'")
   (libtool . "fish -c 'i -y libtool'"))

  :init
  (defun my/vterm-box (&optional box) (interactive)
         (let ((vterm-environment
                (list (concat "VTERM_CI=" (if box box "box"))))) (vterm))))

(use-package multi-vterm :ensure
  :bind
  ("C-s-n" . multi-vterm)
  ("C-s-." . multi-vterm-next)
  ("C-s-," . multi-vterm-prev)
  ("s--"   . multi-vterm-dedicated-toggle)
  ("C-s--" . multi-vterm-project))
#+end_src
* Languages
** C
#+begin_src emacs-lisp
(use-package c-or-c++-mode :defer t
  :mode ("\\.c\\'" "\\.h\\'" "\\.ts\\'")
  :custom
  ;; (c-ts-common-indent-offset 4)
  (c-doc-comment-style '((c-mode . doxygen)
                         (c-ts-mode . doxygen)))
  (c-basic-offset 4)

  :hook
  (c-mode . auto-fill-mode)
  (c-mode . which-function-mode)
  (c-mode . (lambda () (indent-tabs-mode 0)))
  (c-mode . (lambda () (c-set-style "awk"))))

;; (add-to-list 'treesit-auto-recipe-list
             ;; (make-treesit-auto-recipe
              ;; :lang 'c :ts-mode 'c-ts-mode :remap '(c-mode)
              ;; :url "https://github.com/tree-sitter/tree-sitter-c"))

;; (add-to-list 'treesit-auto-recipe-list
;;              (make-treesit-auto-recipe
;;               :lang 'cpp :ts-mode 'c++-ts-mode :remap '(c++-mode)
;;               :url "https://github.com/tree-sitter/tree-sitter-cpp"))

;; (add-to-list 'treesit-auto-recipe-list
             ;; (make-treesit-auto-recipe
              ;; :lang 'c++ :ts-mode 'c++-ts-mode :remap '(c++-mode)
              ;; :url "https://github.com/tree-sitter/tree-sitter-cpp"))
;; (use-package c-mode
;;	:mode ("\\.c\\'" "\\.h\\'")
;;	:hook (c-mode . auto-fill-mode))
#+end_src
** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode :ensure :defer t
  :hook
  (markdown-mode . auto-fill-mode)
  (markdown-mode . flyspell-mode)
  :mode "\\.md\\'"
  :bind (:map markdown-mode-map
              ("<M-up>" . markdown-move-up)
              ("<M-down>" . markdown-move-down)
              ("<M-left>" . markdown-promote)
              ("<M-right>" . markdown-demote)))
#+end_src
** Doxygen
#+begin_src emacs-lisp
(use-package highlight-doxygen :ensure :defer t
  :hook
  ((c-ts-mode) . highlight-doxygen-mode))
#+end_src
** COMMENT Python
#+begin_src emacs-lisp
(use-package python-mode :defer t
  :mode "\\.py\\'"
  ;; (python-mode . (lambda() (if (file-remote-p default-directory) nil (eglot-ensure))))
  ;; :init
  ;; (add-to-list 'treesit-auto-recipe-list
  ;;              (make-treesit-auto-recipe
  ;;               :lang 'python :ts-mode 'python-ts-mode :remap '(python-mode)
  ;;               :url "https://github.com/tree-sitter/tree-sitter-python"))
  )

(use-package python-black :ensure
  :hook (python-mode . python-black-on-save-mode)
  :ensure-system-package ((black . "fish -c 'i -y black'")))

(use-package auto-virtualenv :ensure)

(use-package pyvenv :ensure
  :config
  (add-hook 'python-mode-hook 'auto-virtualenv-set-virtualenv)
  (add-hook 'projectile-after-switch-project-hook 'auto-virtualenv-set-virtualenv)  ;; If using projectile
  )

;; (use-package pipenv :ensure
;;   :hook
;;   (python-mode . (lambda() (if (file-remote-p default-directory) nil (pipenv-mode))))
;;   :init
;;   (add-hook 'python-mode-hook (lambda() (if (file-remote-p default-directory) nil (if (pipenv-project?) (pipenv-activate)))))
;;   (setq
;;   pipenv-projectile-after-switch-function
;;   #'pipenv-projectile-after-switch-extended)
;;   (setq pipenv-with-projectile nil))
#+end_src
*** COMMENT Non-tree-sitter
#+begin_src emacs-lisp
(use-package python-mode :ensure
  :mode "\\.py\\'"
  ;; :hook
  ;; (python-mode . (lambda() (if (file-remote-p default-directory) nil (eglot-ensure))))
  :init
  (use-package pyvenv :ensure
    :init
    (use-package pipenv :ensure
      ;; :hook
      ;; (python-mode . (lambda() (if (file-remote-p default-directory) nil (pipenv-mode))))
      :init
      ;; (add-hook 'python-mode-hook (lambda() (if (file-remote-p default-directory) nil (if (pipenv-project?) (pipenv-activate)))))
      ;; (setq
      ;; pipenv-projectile-after-switch-function
      ;; #'pipenv-projectile-after-switch-extended)
      (setq pipenv-with-projectile nil))))
#+end_src
** Java
#+begin_src emacs-lisp
(use-package java-ts-mode :defer t
  :mode "\\.java\\'"

  :init
  (make-treesit-auto-recipe
   :lang 'java :ts-mode 'java-ts-mode :remap '(java-mode)
   :url "https://github.com/tree-sitter/tree-sitter-java"))
#+end_src
** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode :ensure :defer t
  :hook ((haskell-mode . auto-fill-mode))
  :bind (:map haskell-mode-map
              ("C-c C-i" . haskell-process-load-file)
              ("C-c C-r" . haskell-process-reload)))
#+end_src
** COMMENT Futhark
#+begin_src emacs-lisp
(use-package futhark-mode :ensure
  :mode "\\.fut\\'")
#+end_src
** Latex
#+begin_src emacs-lisp
(use-package tex :ensure auctex :defer t)
#+end_src
** Elisp
#+begin_src emacs-lisp
(use-package emacs-lisp-mode :defer t
  :hook (emacs-list-mode . auto-fill-mode))
#+end_src
** Web
#+begin_src emacs-lisp
(use-package web-mode :ensure :defer t
  :hook ((php-mode . auto-fill-mode))
  :mode ("\\.blade.php\\'"
         "\\.php\\'"
         "\\.html\\'"
         "\\.vue\\'"
         "\\.asp\\'")
  :interpreter "web")

(use-package restclient :ensure :defer t)
#+end_src
*** PHP
#+begin_src emacs-lisp
(use-package php-mode :ensure
  :hook ((php-mode . auto-fill-mode)
         (php-mode . flymake-mode))
  ;; :mode "\\.php\\'"
  :init
  (use-package phpunit :ensure)
  :interpreter "php")
#+end_src
*** CSS
#+begin_src emacs-lisp
(use-package sass-mode :ensure
  :mode ("\\.scss\\'" "\\.sass\\'"))
#+end_src
** Rust
#+begin_src emacs-lisp
(use-package rustic :defer t
  :ensure
  :mode ("\\.rs\\'" . rustic-mode)
  :hook
  (rustic-mode . auto-fill-mode)
  :custom
  (rustic-analyzer-command '("rustup" "run" "stable" "rust-analyzer"))
  (rustic-lsp-client 'eglot)
  :config
  (setq rustic-format-on-save t)
  (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))
#+end_src
** Go
#+begin_src emacs-lisp
(use-package go-ts-mode :ensure
  :hook ((go-ts-mode . auto-fill-mode)
         (go-ts-mode . flymake-mode))

  :mode "\\.go\\'"

  :init
  (add-to-list 'treesit-auto-recipe-list
               (make-treesit-auto-recipe
                :lang 'go
                :ts-mode 'go-ts-mode
                :remap '(go-mode)
                :url "https://github.com/tree-sitter/tree-sitter-go"
                :ext "\\.go\\'")))
#+end_src
** Yaml
#+begin_src emacs-lisp
(use-package yaml-mode :ensure :defer t
  :mode "\\.yaml\\'")
#+end_src
** COMMENT Erlang
#+begin_src emacs-lisp
(use-package erlang :ensure :defer t
  :mode "\\.erl\\'")
#+end_src
** Docker
#+begin_src emacs-lisp
(use-package dockerfile-mode :defer t
  :mode "Dockerfile\\'")
#+end_src
** Julia
#+begin_src emacs-lisp
(use-package julia-ts-mode :ensure :defer t
  :mode "\\.jl\\'"

  :init
  (add-to-list 'treesit-auto-recipe-list
               (make-treesit-auto-recipe
                :lang 'julia
                :ts-mode 'julia-ts-mode
                :remap '(julia-mode)
                :url "https://github.com/tree-sitter/tree-sitter-julia"
                :ext "\\.jl\\'")))
#+end_src
** Nix
#+begin_src emacs-lisp
(use-package nix-mode :ensure :defer t
  :mode "\\.nix\\'")
#+end_src
** SSH-config
#+begin_src emacs-lisp
(use-package ssh-config-mode :ensure :defer t)
#+end_src
** Fish
#+begin_src emacs-lisp
(use-package fish-mode :ensure :defer t
  :mode "\\.fish\\'")
#+end_src
** JSON
#+begin_src emacs-lisp
(use-package json-ts-mode :defer t
  :mode "\\.json\\'"
  :custom (json-ts-mode-indent-offset 2))

(add-to-list 'treesit-auto-recipe-list
             (make-treesit-auto-recipe
              :lang 'json
              :ts-mode 'json-ts-mode
              :remap '(json-mode)
              :url "https://github.com/tree-sitter/tree-sitter-json"
              :ext "\\.json\\'"))
#+end_src
** Systemd
#+begin_src emacs-lisp
(use-package systemd :ensure :defer t
  :mode ("\\.service\\'" . systemd-mode))
#+end_src
** COMMENT VHDL
#+begin_src emacs-lisp
(use-package vhdl-tools :ensure
  :mode (("\\.vhdl\\'" . vhdl-mode)
         ("\\.vhd\\'"  . vhdl-mode)))
#+end_src
** COMMENT BNF
#+begin_src emacs-lisp
(use-package bnfc :ensure
  :mode "\\.cf\\'")
#+end_src
** Protobuf
#+begin_src emacs-lisp
(use-package protobuf-ts-mode :ensure :defer t
  :mode "\\.proto\\'"

  :custom
  (protobuf-ts-mode-indent-offset 4)

  :init
  (add-to-list 'treesit-language-source-alist
               '(proto "https://github.com/mitchellh/tree-sitter-proto")))
#+end_src
** Bash
#+begin_src emacs-lisp
(use-package bash-ts-mode :defer t
  :mode ("\\.sh\\'" "\\.bash\\'"))

(add-to-list 'treesit-auto-recipe-list
             (make-treesit-auto-recipe
              :lang 'bash
              :ts-mode 'bash-ts-mode
              :remap '(sh-mode)
              :url "https://github.com/tree-sitter/tree-sitter-bash"
              :ext "\\.sh\\'"))
#+end_src
** Arduino
#+begin_src emacs-lisp
(use-package arduino-mode :ensure
  :mode "\\.ino\\'")
#+end_src
** Lua
#+begin_src emacs-lisp
(use-package lua-mode :ensure
  :mode "\\.lua\\'")
#+end_src
** Robot
#+begin_src emacs-lisp
(use-package robot-mode :ensure
  :mode "\\.robot\\'")
#+end_src
* Flymake
#+begin_src emacs-lisp
(use-package flymake :defer t
  :bind
  ("C-c e n" . flymake-goto-next-error)
  ("C-c e p" . flymake-goto-prev-error))
#+end_src
* Expand region
#+begin_src emacs-lisp
(use-package expand-region :ensure :defer t
  :bind ("M-o" . er/expand-region))
#+end_src
* Multiple Cursor
#+begin_src emacs-lisp
(use-package multiple-cursors :ensure :defer t
  :bind
  ("C-S-c C-S-c" . mc/edit-lines)
  ("C-\>" . mc/mark-next-like-this)
  ("C-\<" . mc/mark-previous-like-this)
  :init
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+end_src
* Nov
#+begin_src emacs-lisp
(use-package nov :ensure :defer t
  :init (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src
* Writeroom
#+begin_src emacs-lisp
(use-package writeroom-mode :ensure
  :custom
  (writeroom-major-modes
   '(
     Custom-mode
     bash-ts-mode
     c-mode
     c-ts-mode
     conf-mode
     conf-unix-mode
     css-mode
     css-ts-mode
     dired-mode
     dockerfile-mode
     dockerfile-ts-mode
     emacs-lisp-mode
     fish-mode
     fundamental-mode
     go-ts-mode
     haskell-ts-mode
     helpful-mode
     java-ts-mode
     js-mode
     js-ts-mode
     json-mode
     json-ts-mode
     julia-mode
     julia-ts-mode
     lisp-data-mode
     magit-mode
     makefile-gmake-mode
     makefile-mode
     markdown-mode
     minibuffer-mode
     nix-mode
     nov-mode
     org-agenda-mode
     org-mode
     php-mode
     php-ts-mode
     protobuf-ts-mode
     python-mode
     python-ts-mode
     robot-mode
     rust-ts-mode
     sgml-mode
     sh-mode
     systemd-mode
     text-mode
     vterm-mode
     yaml-mode
     ld-script-mode
     ))
  (writeroom-global-effects nil)
  (writeroom-mode-line t)
  (writeroom-fringes-outside-margins nil)
  (global-writeroom-mode t nil (writeroom-mode))
  (writeroom-width 81)
  (writeroom-maximize-window nil))
#+end_src
* Spacious Padding
#+begin_src emacs-lisp
(use-package spacious-padding :ensure
  :config
  (spacious-padding-mode t)
  :custom
  (spacious-padding-widths
   '(:internal-border-width 16 :right-divider-width 32 :scroll-bar-width 8)))
#+end_src
* Dired
#+begin_src emacs-lisp
(use-package dired
  :hook (dired-mode . dired-hide-details-mode)

  :custom
  (dired-mouse-drag-files t)
  (dired-dwim-target t)
  (dired-auto-revert-buffer t)
  (delete-by-moving-to-trash t)
  ;; (setq ls-lisp-use-insert-directory-program nil)
  )

(use-package dired-subtree :ensure :after dired
  :bind (:map dired-mode-map
              ("<tab>" . dired-subtree-toggle)
              ("<C-tab>" . dired-subtree-cycle)))

(use-package nerd-icons-dired :ensure :after dired
  :hook (dired-mode . nerd-icons-dired-mode))

(use-package dired-hide-dotfiles :ensure :after dired
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :bind (:map dired-mode-map ("C-." . dired-hide-dotfiles-mode)))

(use-package dired-collapse :ensure :after dired
  :hook (dired-mode . dired-collapse-mode))
#+end_src

** COMMENT Dirvish
#+begin_src emacs-lisp
(use-package dirvish :ensure
  :init
  (dirvish-override-dired-mode)
  :config
  (setq dirvish-mode-line-format
        '(:left (sort symlink) :right (omit yank index)))
  (setq dirvish-mode-line-height 10)
  (setq dirvish-attributes
        '(nerd-icons file-time file-size collapse subtree-state vc-state git-msg))
  (setq dirvish-subtree-state-style 'nerd)
  (setq delete-by-moving-to-trash t)
  (setq dirvish-path-separators (list
                                 (format "  %s " (nerd-icons-codicon "nf-cod-home"))
                                 (format "  %s " (nerd-icons-codicon "nf-cod-root_folder"))
                                 (format " %s " (nerd-icons-faicon "nf-fa-angle_right"))))
  (setq dired-listing-switches
        "-l --almost-all --human-readable --group-directories-first --no-group")
  (dirvish-peek-mode) ; Preview files in minibuffer
  (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
)
#+end_src
* COMMENT Golden ratio
#+begin_src emacs-lisp
(use-package golden-ratio :ensure :defer t
  :init (golden-ratio-mode 1))
#+end_src
* Eshell
#+begin_src emacs-lisp
(use-package eshell :ensure nil :defer t)

(use-package eshell-syntax-highlighting :ensure :after eshell
  :config
  (eshell-syntax-highlighting-global-mode +1)
  :init
  (defface eshell-syntax-highlighting-invalid-face
    '((t :inherit diff-error))
    "Face used for invalid Eshell commands."
    :group 'eshell-syntax-highlighting))

(use-package eshell-git-prompt :ensure :after eshell)

(use-package eshell-vterm :ensure :after eshell
  :bind (:map vterm-mode-map
         ("C-q" . vterm-send-next-key))
  :config
  (eshell-vterm-mode)
  :init
  (defalias 'eshell/v 'eshell-exec-visual))
#+end_src
* Repeat
#+begin_src emacs-lisp
(use-package repeat :ensure nil
  :init
  (repeat-mode 1)

  :custom
  (repeat-exit-timeout 5))
#+end_src
* Mwheel
#+begin_src emacs-lisp
(use-package mwheel
  :ensure nil
  :custom
  (mouse-wheel-tilt-scroll t)
  (mouse-wheel-scroll-amount-horizontal 2)
  (mouse-wheel-flip-direction t))
#+end_src
* Dictionary
#+begin_src emacs-lisp
(use-package dictionary :defer t
  :custom
  (dictionary-server "dict.org"))
#+end_src
* Executable
#+begin_src emacs-lisp
(use-package executable
  :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src
* Pulse
#+begin_src emacs-lisp
(use-package pulse
  :ensure nil
  :defer t
  :init
  (defun pulse-line (&rest _)
    "Pulse the current line."
    (pulse-momentary-highlight-one-line (point)))

  (dolist (command '(scroll-up-command
                     scroll-down-command
                     windmove-left
                     windmove-right
                     windmove-up
                     windmove-down
                     move-to-window-line-top-bottom
                     recenter-top-bottom other-window))
    (advice-add command :after #'pulse-line)))
#+end_src
* Dumb Jump
#+begin_src emacs-lisp
(use-package dumb-jump :ensure
  :if (not (getenv "TERMUX_VERSION"))

  :custom
  (dumb-jump-prefer-searcher 'ag)
  (dumb-jump-force-searcher 'ag)
  (dumb-jump-selector 'completing-read)

  :init
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)

  :ensure-system-package
  ((ag . "fish -c 'i -y the_silver_searcher'"))
  )
#+end_src
* Scroll
#+begin_src emacs-lisp
(use-package pixel-scroll
  :if (not (string-match-p (regexp-quote "doshkad") system-name))
  ;; :bind
  ;; ([remap scroll-up-command]   . pixel-scroll-interpolate-down)
  ;; ([remap scroll-down-command] . pixel-scroll-interpolate-up)
  :custom
  (pixel-scroll-precision-interpolate-page t)
  :init
  (pixel-scroll-precision-mode 1))
#+end_src
* Startup
#+begin_src emacs-lisp
(org-agenda nil "a")
#+end_src
* Isearch
#+begin_src emacs-lisp
(use-package isearch
  :custom (isearch-allow-motion t))
#+end_src
* COMMENT Archive
** Ivy
#+begin_src emacs-lisp
(use-package ivy :ensure
  :bind (:map ivy-minibuffer-map ("C-l" . ivy-backward-kill-word))
  :init (ivy-mode 1))
#+end_src
** LSP Mode
:LOGBOOK:
- Refiled on [2023-09-09 lรถr 15:08]
:END:
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :commands lsp
  :custom
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  ;; enable / disable the hints as you prefer:
  (lsp-auto-guess-root t)
  ;; (lsp-enable-symbol-highlighting nil)
  ;; (lsp-headerline-breadcrumb-enable nil)
  ;; (lsp-semantic-tokens-enable nil)
  ;; (lsp-enable-folding nil)
  ;; (lsp-enable-imenu nil)
  ;; (lsp-rust-analyzer-cargo-watch-command "clippy")
  ;; (lsp-rust-analyzer-server-display-inlay-hints t)
  ;; (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  ;; (lsp-rust-analyzer-display-chaining-hints t)
  ;; (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  ;; (lsp-rust-analyzer-display-closure-return-type-hints t)
  ;; (lsp-rust-analyzer-display-parameter-hints nil)
  ;; (lsp-rust-analyzer-display-reborrow-hints nil)
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode)
  :init
  (use-package ccls :ensure
    :hook ((c-mode c++-mode) .
           (lambda () (require 'ccls) (lsp)))
    :custom
    (ccls-executable "~/.local/bin/ccls")))

(use-package lsp-ui
  :ensure
  :commands lsp-ui-mode
  :custom
                                        ; (lsp-ui-peek-always-show t)
                                        ; (lsp-ui-sideline-show-hover t)
                                        ; (lsp-ui-doc-enable nil)
  )
#+end_src
** Direnv
:LOGBOOK:
- Refiled on [2023-10-03 tis 21:28]
:END:
#+begin_src emacs-lisp
(use-package direnv :ensure
  :config
  (direnv-mode))
#+end_src
** Helm
:LOGBOOK:
- Refiled on [2024-02-03 lรถr 11:53]
- Refiled on [2023-09-29 Fri 16:43]
- Refiled on [2023-09-12 tis 19:31]
- Refiled on [2023-09-12 tis 19:27]
:END:
#+begin_src emacs-lisp
(use-package helm :ensure
  :bind
  ("C-x m" . helm-man-woman)
  ("C-x t" . helm-top))
#+end_src
** Evil
:LOGBOOK:
- Refiled on [2024-02-03 lรถr 17:52]
:END:
#+begin_src emacs-lisp
(use-package evil :ensure)
#+end_src
** ChatGPT
:LOGBOOK:
- Refiled on [2024-02-04 sรถn 16:05]
- Refiled on [2024-02-03 lรถr 13:19]
:END:
#+begin_src emacs-lisp
(use-package chatgpt-shell :ensure
  :custom (chatgpt-shell-openai-key
           (auth-source-pick-first-password :host "api.openai.com"))
  (chatgpt-shell-model-versions '("gpt-3.5-turbo")))
#+end_src
** Helpful
:LOGBOOK:
- Refiled on [2024-02-04 sรถn 17:37]
:END:
#+begin_src emacs-lisp
(use-package helpful :ensure :defer t
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)))
#+end_src
** Highlight TODO
:LOGBOOK:
- Refiled on [2024-05-27 mรฅn 16:15]
:END:
#+begin_src emacs-lisp
(use-package hl-todo :ensure :defer t
  :hook (c-ts-mode . hl-todo-mode))
#+end_src
** Rainbow mode
:LOGBOOK:
- Refiled on [2024-09-09 mรฅn 14:00]
:END:
#+begin_src emacs-lisp
(use-package rainbow-mode :ensure :defer t
  :hook (emacs-lisp-mode . rainbow-mode))
#+end_src
